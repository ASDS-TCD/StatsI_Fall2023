load("~/.Rhistory")
demo ()
data ()
Nile
sum(chickwts$weight)
View(chickwts)
View(chickwts)
y_sum <- sum(y)
rm(list = ls())
# Can you use the sqrt() function to compute the square root of 962?
sqrt(962)
ls()
ls()
ls()
1s()
ls()
ls()
# Look at some data sets (as we did before RStudio)
data()
Nile
help(Nile)
mean(Nile)
plot(Nile)
hist(Nile)
# Now try calling x.
x <-
# And see what happens when we call the ls() function again.
ls()
# Now try calling x.
x <-
# And see what happens when we call the ls() function again.
ls()
# R calculates stuff, e.g., add 2 and 2
2 + 2
# R calculates stuff, e.g., add 2 and 2
2 + 2 =
# Create 7 random numbers between 0 and 1
runif(7)
# R calculates stuff, e.g., add 2 and 2
2 + 2 =
# Create 7 random numbers between 0 and 1
runif(7)
2 + 2 =
# R calculates stuff, e.g., add 2 and 2
2 + 2 =
# Create 7 random numbers between 0 and 1
runif(7)
# R calculates stuff, e.g., add 2 and 2
sum ()
# R calculates stuff, e.g., add 2 and 2
sum (2,2)
# R calculates stuff, e.g., add 2 and 2
2+2
# Create 7 random numbers between 0 and 1
runif(7)
# R allows for two different versions to assign a value to a name
z <- 2 + 2 #better way
# "c" stands for concatenate so "y" here stores the values 1, 2 and 4.
y <- c(1, 2, 4)
#Parts of individual objects can be accessed via square brackets
y[3]
y[2]
# We can access multiple parts of objects with a colon
y[2:3]
# Suppose now we want the sum of y
sum(y)
# Store the output of a function in another object
z <- sum(y)
# Can you use the sqrt() function to compute the square root of 962?
sqrt(962)
# Can you now assign to a new object?
squareroot <- sqrt(962)
a <- sqrt(962)
class (a)
a + 5
rm(list = ls())
x <- "Hello"
x <- "Hello"
class(x)
class(5)
length(x)
x[1]
x[2]
x[2] <- "world"
# Extract the element named gamma from the vector below.
vec2 <- c(alpha = 1, beta = 2, gamma = 3)
vec[gamma]
vec(gamma)
vec("gamma")
vec2["gamma"]
vec2[3]
vec1 <- seq(200:250)
vec1 <- 200:250
vec1
help(seq)
x <- rnorm(n = 50)
length(x)
mean(x)
sd(x)
# Use rnrom() to generate 100 random normal values
# with a mean of 100 and a standard deviation of 15.
y <-rnorm(n = 50)
length(y)
# Use rnrom() to generate 100 random normal values
# with a mean of 100 and a standard deviation of 15.
y <-rnorm(n = 100)
length(y)
mean(y)
# Use rnrom() to generate 100 random normal values
# with a mean of 100 and a standard deviation of 15.
y <-rnorm(n = 100, mean = 100, sd = 15)
# Use rnrom() to generate 100 random normal values
# with a mean of 100 and a standard deviation of 15.
y <-rnorm(n = 100, mean = 100, sd = 15)
length(y)
mean(y)
sd(y)
rnorm(100, mean=100, sd=100)
set.seed(2)
set.seed(2)
rnorm(100, mean=100, sd=100)
rnorm(100, mean=100, sd=15)
set.seed(2)
rnorm(100, mean=100, sd=15)
hist(rnorm=100, mean=100, sd=15)
data <- rnorm(100, mean=100, sd=15)
length(data)
hist(data)
set.seed (2)
data <- rnorm(100, mean=100, sd=15)
data1 <- rnorm(100, mean=100, sd=15)
hist(data1)
?set.seed
#not set seed
data1 <- rnorm(100, mean=100, sd=15)
hist(data1)
hist(data1)
y <- x
y <- 2*y
y <- x
y <- 2*y
y <- x
y <- 2*y
y
xylm <- lm(y~x)
xylm
attributes(xylm)
xylm$coefficients
summary(xylm)
class(xylm)
summary(xylm)
summary(ChickWeight)
plot(x,y)
xylm$residuals
plot(xylm$residuals)
plot(xylm$residuals)
4+4
install.packages('IRkernel')
IRkernel::installspec(user = FALSE)
IRkernel::installspec(user = Administrator)
IRkernel::installspec(user = FALSE)
# Get working directory
getwd()
data_matrix <- matrix(c(14, 6, 7, 7, 7, 1), nrow = 2, byrow = TRUE)
data_frame <- as.data.frame(data_matrix)
rownames(data_frame) <- c("Upper Class", "Lower Class")
colnames(data_frame) <- c("Not Stopped", "Bribe Requested", "Stopped/Given Warning")
# Print the contingency table
print(data_frame)
pchisq(3.85, df=(rows-1)(columns-1), lower.tail = FALSE)
pchisq(3.85, df=2, lower.tail = FALSE)
chi_square_result <- chisq.test(data_frame)
data_matrix <- matrix(c(14, 6, 7, 7, 7, 1), nrow = 2, byrow = TRUE)
data_frame <- as.data.frame(data_matrix)
rownames(data_frame) <- c("Upper Class", "Lower Class")
colnames(data_frame) <- c("Not Stopped", "Bribe Requested", "Stopped/Given Warning")
# Print the contingency table
print(data_frame)
print(standardized_residuals)
# Create the contingency table
data_matrix <- matrix(c(14, 6, 7, 7, 7, 1), nrow = 2, byrow = TRUE)
data_frame <- as.data.frame(data_matrix)
rownames(data_frame) <- c("Upper Class", "Lower Class")
colnames(data_frame) <- c("Not Stopped", "Bribe Requested", "Stopped/Given Warning")
chi_square_result <- chisq.test(data_frame)
standardized_residuals <- residuals(chi_square_result, "pearson")
print(standardized_residuals)
print(chi_square_result)
# Calculate standardized residuals
standardized_residuals <- residuals(chi_square_result)
# Print the standardized residuals
print(standardized_residuals)
# Set working directory
setwd("C://Users//Administrator//Desktop//TCD ASDS//Applied Statistical Analysis I//StatsI_Fall2023//")
# Load data
df_not_tidy <- read.csv("datasets/movies.csv")
# First step, look at data
View(df_not_tidy)
str(df_not_tidy)
head(df_not_tidy)
summary(df_not_tidy)
read.csv('https://raw.githubusercontent.com/kosukeimai/qss/master/PREDICTION/women.csv')
read.csv('https://raw.githubusercontent.com/kosukeimai/qss/master/PREDICTION/women.csv')
data <- read.csv('https://raw.githubusercontent.com/kosukeimai/qss/master/PREDICTION/women.csv')
view(data)
View(data)
summary(data)
header(data)
head(data)
model1 <- lm(water~female, data=data)
summary(model1)
plot((water~female, data=data))
plot(water~female, data=data)
par(mar = c(5, 4, 4, 2))
plot(water~female, data=data)
par(mar = c(2, 2, 2, 2))
plot(water~female, data=data)
summary <- summary(model1)
summary <- summary(model1)
(summary)
mean(data$female)
mean(data$water)
sum(mean(data$female))
sum(data$female)
sum(data$water)
sum ((data$water − mean(data$water) * (data$female - mean(data$female)
sum (data$water − mean(data$water) * (data$female - mean(data$female)
sum(data$water−mean(data$water) * (data$female - mean(data$female))
sum((data$water−mean(data$water) * (data$female - mean(data$female))
sum((data$water−mean(data$water)) * (data$female - mean(data$female)))
sum((data$water−mean(data$water)) * (data$female - mean(data$female)))
data <- read.csv('https://raw.githubusercontent.com/kosukeimai/qss/master/PREDICTION/women.csv')
mean(data$water)
mean(data$female)
sum(data$water)
sum(data$female)
sum((data$water−mean(data$water)) * (data$female - mean(data$female)))
sum((data$water−mean(data$water))*(data$female - mean(data$female)))
sum((data$water−mean(data$water))*(data$female - mean(data$female)))
sum((data$water - mean(data$water)) * (data$female - mean(data$female)))
sum((data$water - mean(data$water))^2
sum((data$water - mean(data$water))^2
sum((data$water - mean(data$water))^2)
599.6398/364100.9
599.6398/364100.9 =
599.6398/364100.9
599.6398/364100.9
mean(data$female)
mean(data$water)
0.3850932 - 0.001646906(17.84161)
0.3850932 - 0.001646906(17.84161)
0.001646906(17.84161)
0.001646906*17.84161
0.3850932 - 0.02938345
0.3850932 - 0.02938345
lm(water~female, data=data)
mean(data$water)
meanY <- mean(data$water)
data <- read.csv('https://raw.githubusercontent.com/kosukeimai/qss/master/PREDICTION/women.csv')
meanY <- mean(data$water)
meanX <- mean(data$female)
sumY <- sum(data$water)
sumX <- sum(data$female)
sum1 <- sum((data$water - mean(data$water)) * (data$female - mean(data$female)))
sum2 <- sum((data$water - mean(data$water))^2)
beta <- sum1/sum2
alpha <- meanY-(beta*meanX)
lm(water~female, data=data)
lm(female~water, data=data)
alpha <- meanY-(beta*meanX)
beta*meanX
meanY
sum22 <- sum((data$female - mean(data$female))^2)
sum11 <- sum((data$water - mean(data$water)) * (data$female - mean(data$female)))
beta <- sum11/sum22
alpha <- meanY-(beta*meanX)
lm(water~female, data=data)
covariance <- cov(data$water, data$female)
lm(water~female, data=data)
model <- lm(water~female, data=data)
plot(data$female, data$water,
main = "Bivariate Regression",
xlab = "Independent Variable",
ylab = "Dependent Variable")
abline(model, col = "red")
boxplot(data$female, data$water)
# Load data
df <- readRDS("datasets/movies.rds")
# Load data
df <- read.csv("datasets/fictional_data.csv")
# Fit linear regression model
summary(lm(df$income~df$edu))
summary(lm(income~edu, data=df))
# Save model as object
model <- lm(income~edu, data=df)
# t-test for the slope of a regression line
summary(model)
lm(water~female, data=data)
model <- lm(water~female, data=data)
summary(model)
7.864/3.838
# Check p-value
sprintf("%.20f",2.17e-06)
# t-test for the slope of a regression line
7.864/3.838
lm(water~female, data=data)
model <- lm(water~female, data=data)
summary(model)
